import java.nio.file.Files
import java.nio.file.Paths

apply from: '../configs/apk.gradle'

android {
    String APP_ID = 'com.mirfatif.permissionmanagerx'
    namespace APP_ID

    defaultConfig {
        applicationId APP_ID

        versionCode 121
        versionName 'v1.21'

        // Flavor-independent and BuildType-independent BuildConfig.APPLICATION_ID
        buildConfigField 'String', 'APP_ID', '"' + APP_ID + '"'

        // Daemon dex file to be saved in assets directory.
        buildConfigField 'String', 'DAEMON_DEX', '"' + daemonDex + '"'
    }

    flavorDimensions.add(0, 'type')
    productFlavors {
        self {
            dimension 'type'
        }
        ps {
            dimension 'type'
            applicationIdSuffix '.ps'
            versionNameSuffix '-ps'
        }
        fdroid {
            dimension 'type'
            versionNameSuffix '-fd'
        }
        amaz {
            dimension 'type'
            versionNameSuffix '-amaz'
        }
        pro {
            applicationIdSuffix '.pro'
            versionNameSuffix '-pro'
        }
    }

    variantFilter { variant ->
        List names = variant.flavors*.name
        if (noPro) {
            if (!names.contains('fdroid') || !names.contains('foss')) {
                variant.setIgnore(true)
            }
        } else if (names.contains('ps') && names.contains('foss')) {
            variant.setIgnore(true)
        } else if ((names.contains('fdroid') || names.contains('amaz')) && names.contains('pro')) {
            variant.setIgnore(true)
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
        }
    }

    applicationVariants.configureEach { variant ->
        def mf = variant.mergedFlavor
        if (variant.flavorName == 'psPro' && variant.buildType.name == 'release') {
            // No .ps.pro suffix for Play Store Pro release
            mf.setApplicationId(APP_ID)
        }

        String lfp = variant.applicationId + '.LogFileProvider'
        mf.addManifestPlaceholders(LOG_FILE_PROVIDER: lfp)
        variant.buildConfigField 'String', 'LOG_FILE_PROVIDER', '"' + lfp + '"'

        // print(variant.name + ' ' + variant.applicationId + ' ')
        // print(mf.manifestPlaceholders)
        // println()
    }

    sourceSets.configureEach { sc ->
        // These combinations are not created by default (required for daemon dex).
        def dir
        if (sc.name.matches('(self|ps)ProDebug')) {
            dir = 'proDebug'
        } else if (sc.name.matches('(self|ps)ProRelease')) {
            dir = 'proRelease'
        } else if (sc.name.matches('(self|fdroid|amaz)FossDebug')) {
            dir = 'fossDebug'
        } else if (sc.name.matches('(self|fdroid|amaz)FossRelease')) {
            dir = 'fossRelease'
        } else {
            return
        }
        sc.assets.srcDirs += ["$projectDir/src/$dir/assets"]
    }

    packagingOptions {
        jniLibs {
            // Due to android:extractNativeLibs set to 'true' in AndroidManifest.
            useLegacyPackaging true
        }
    }

    buildFeatures {
        viewBinding true
        dataBinding true
        buildConfig = true
    }
}

configurations {
    configureEach {
        // To avoid duplicate class version conflict.
        exclude group: 'androidx.lifecycle', module: 'lifecycle-viewmodel-ktx'
    }
}

dependencies {
    implementation project(path: ':priv_library')

    implementation 'com.github.MuntashirAkon:libadb-android:2.2.0'
    // To generate X509Certificate
    implementation 'com.github.MuntashirAkon:sun-security-android:1.1'
    // For conscrypt
    implementation 'org.lsposed.hiddenapibypass:hiddenapibypass:4.3'

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.recyclerview:recyclerview:1.3.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.2.0-alpha01'
    implementation 'androidx.preference:preference:1.2.1'
    implementation 'androidx.browser:browser:1.5.0'
    implementation 'androidx.room:room-runtime:2.5.2'
    implementation 'androidx.security:security-crypto:1.1.0-alpha06'
    implementation 'androidx.webkit:webkit:1.7.0'
    annotationProcessor 'androidx.room:room-compiler:2.5.2'

    // For SnackBar and NavigationView. Also includes CoordinatorLayout
    implementation 'com.google.android.material:material:1.9.0'

    // To handle hyperlink onClick in TextView
    implementation 'me.saket:better-link-movement-method:2.2.0'

    // To use Iterables for splitting Collections
    implementation("com.google.guava:guava:31.1-android")

    // Let's behave responsibly
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.10'
}

def copyFileIfChanged(File src, File dst) {
    assert src.file
    assert !dst.exists() || dst.file

    if (dst.exists()) {
        byte[] s = Files.readAllBytes(Paths.get(src.absolutePath))
        byte[] d = Files.readAllBytes(Paths.get(dst.absolutePath))
        if (Arrays.equals(s, d)) {
            println('UP-TO-DATE: ' + dst.absolutePath)
            return
        }

        delete dst
    }

    copy {
        from src
        into dst.parentFile
        rename { fileName -> dst }
    }

    if (dst.exists()) {
        println('Creating: ' + dst.absolutePath)
    } else {
        throw new GradleException('Failed to create: ' + dst.absolutePath)
    }
}

def createTasksForDaemonBuild = () -> {
    for (boolean foss : new boolean[]{true, false}) {
        if (noPro && !foss) {
            continue
        }

        for (boolean debug : new boolean[]{true, false}) {
            String task = foss ? 'Foss' : 'Pro'
            task += debug ? 'Debug' : 'Release'

            String dir = foss ? 'foss' : 'pro'
            dir += debug ? 'Debug' : 'Release'

            String dexTaskDep

            if (!debug) {
                dexTaskDep = 'minify' + task + 'WithR8'
            } else {
                dexTaskDep = 'mergeDex' + task
            }

            String src = 'priv_daemon/build/intermediates/dex/'
            src += dir + '/' + dexTaskDep + '/classes.dex'

            File srcFile = new File(rootDir, src)
            File dstFile = new File(rootDir, 'app/src/' + dir + '/assets/' + daemonDex)

            tasks.register('buildDaemon' + task) {
                dependsOn(':priv_daemon:' + dexTaskDep)

                if (foss) {
                    doLast {
                        copyFileIfChanged(srcFile, dstFile)
                    }
                } else {
                    ext.srcFile = srcFile
                    ext.dstFile = dstFile
                }
            }
        }
    }
}

tasks.register('buildNativeFoss', Exec) {
    environment 'ANDROID_NDK', ndkDir
    workingDir nativeDir
    commandLine './build_native.sh'

    doLast {
        if (executionResult.get().exitValue != 0) {
            throw new GradleException('buildNativeFoss failed')
        }
    }
}

def setExtSrcDependencies(String type, String version) {
    for (boolean debug : new boolean[]{true, false}) {
        String build = debug ? 'Debug' : 'Release'

        TaskProvider task = tasks.named('merge' + type + version + build + 'Assets')

        task.configure {
            dependsOn('buildDaemon' + version + build)
        }

        task = tasks.named('merge' + type + version + build + 'JniLibFolders')

        task.configure {
            if (version == 'Foss') {
                dependsOn('buildNativeFoss')
            } else {
                dependsOn('buildNative' + type + version + build)
            }
        }
    }
}

createTasksForDaemonBuild()

if (!noPro) {
    apply from: '../configs/pro-app.gradle'
}

afterEvaluate {
    setExtSrcDependencies('Fdroid', 'Foss')

    if (!noPro) {
        setExtSrcDependencies('Self', 'Foss')
        setExtSrcDependencies('Amaz', 'Foss')
        setExtSrcDependencies('Self', 'Pro')
        setExtSrcDependencies('Ps', 'Pro')
    }
}

clean.doLast {
    // Delete daemon dex
    for (String variant in new String[]{'fossRelease', 'fossDebug', 'proRelease', 'proDebug'}) {
        Paths.get(projectDir.absolutePath, 'src/' + variant + '/assets').deleteDir()
    }
    // Delete native libraries
    for (String variant in new String[]{'main', 'foss', 'selfProRelease',
            'psProRelease', 'selfProDebug', 'psProDebug'}) {
        Paths.get(projectDir.absolutePath, 'src/' + variant + '/jniLibs').deleteDir()
    }
}

preBuild.doFirst {
    // Re-merge the assets and jniLibs source sets.
    for (String dir in new String[]{'assets', 'merged_jni_libs'}) {
        Paths.get(projectDir.absolutePath, 'build/intermediates/' + dir).deleteDir()
    }
}
