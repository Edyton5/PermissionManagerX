apply plugin: 'com.android.application'

android {
    compileSdk compileSdkVer
    buildToolsVersion buildToolsVer

    defaultConfig {
        applicationId "com.mirfatif.permissionmanagerx"
        minSdk minSdkVer
        targetSdk targetSdkVer
        versionCode 111
        versionName "v1.11"

        // BuildType-independent and Flavor-independent BuildConfig.APPLICATION_ID
        buildConfigField "String", "APP_ID", '"' + applicationId + '"'

        def br = "git rev-parse --abbrev-ref HEAD".execute().text.trim()
        buildConfigField "boolean", "GH_VERSION", (br != "ps" && br != "ps-dev") ? "true" : "false"
        buildConfigField "boolean", "AMAZ_VERSION", (br == "amaz") ? "true" : "false"
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dependenciesInfo {
        includeInApk false
    }

    packagingOptions {
        jniLibs {
            // Due to android:extractNativeLibs set to "true" in AndroidManifest.
            useLegacyPackaging true
        }
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation project(path: ':AdbLib')
    implementation project(path: ':priv_library')

    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.2.0-alpha01'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.browser:browser:1.3.0'
    implementation 'androidx.room:room-runtime:2.3.0'
    implementation "androidx.security:security-crypto:1.1.0-alpha03"
    implementation 'androidx.webkit:webkit:1.4.0'
    annotationProcessor 'androidx.room:room-compiler:2.3.0'

    // For SnackBar and NavigationView. Also includes CoordinatorLayout
    implementation 'com.google.android.material:material:1.4.0'

    // To handle hyperlink onClick in TextView
    implementation 'me.saket:better-link-movement-method:2.2.0'

    // Let's behave responsibly
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'
}

task buildDaemon() {
    def isDebug = false
    for (String taskName : gradle.startParameter.taskNames) {
        if (taskName.contains("Debug")) {
            isDebug = true
            break
        }
    }
    def src = "priv_daemon/build/outputs/apk/release/priv_daemon-release.apk"
    if (isDebug) {
        src = "priv_daemon/build/outputs/apk/debug/priv_daemon-debug.apk"
        dependsOn(':priv_daemon:assembleDebug')
        mustRunAfter(':priv_daemon:assembleDebug')
    } else {
        dependsOn(':priv_daemon:assembleRelease')
        mustRunAfter(':priv_daemon:assembleRelease')
    }

    doLast {
        def dexFile = 'com.mirfatif.privdaemon.pmx.dex'
        def dstDir = new File(rootDir, "app/src/main/assets/")
        def dstFile = new File(dstDir, dexFile)
        delete dstFile
        copy {
            from zipTree(new File(rootDir, src)).matching { include 'classes.dex' }.singleFile
            into dstDir
            rename { fileName -> dexFile }
        }
        if (!dstFile.exists()) {
            throw new GradleException("buildDaemon failed!\n" + dstFile.getPath() + " does not exist")
        }
    }
}
preBuild.dependsOn(buildDaemon)

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def sdkDir = properties.getProperty('sdk.dir')

task buildNative(type: Exec) {
    environment 'ANDROID_NDK', new File(sdkDir, "ndk/" + ndkVer).getAbsolutePath()
    workingDir "$rootDir/native"
    commandLine './build_native.sh'
    doLast {
        if (execResult.getExitValue() != 0) {
            println "buildNative failed!"
        }
    }
}
preBuild.dependsOn(buildNative)

apply plugin: 'com.github.sherter.google-java-format'
preBuild.dependsOn(verifyGoogleJavaFormat)
